<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="821.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="821.00"> </text><svg id="frames" x="10" width="1180" total_samples="213"><g><title>[[kernel.kallsyms]] (3 samples, 1.41%)</title><rect x="0.0000%" y="757" width="1.4085%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (3 samples, 1.41%)</title><rect x="0.0000%" y="741" width="1.4085%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (3 samples, 1.41%)</title><rect x="0.0000%" y="725" width="1.4085%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (3 samples, 1.41%)</title><rect x="0.0000%" y="709" width="1.4085%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (3 samples, 1.41%)</title><rect x="0.0000%" y="693" width="1.4085%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3"/><text x="0.2500%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (3 samples, 1.41%)</title><rect x="0.0000%" y="677" width="1.4085%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3"/><text x="0.2500%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (3 samples, 1.41%)</title><rect x="0.0000%" y="661" width="1.4085%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="3"/><text x="0.2500%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (3 samples, 1.41%)</title><rect x="0.0000%" y="645" width="1.4085%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="3"/><text x="0.2500%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (3 samples, 1.41%)</title><rect x="0.0000%" y="629" width="1.4085%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="3"/><text x="0.2500%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (3 samples, 1.41%)</title><rect x="0.0000%" y="613" width="1.4085%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="3"/><text x="0.2500%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (3 samples, 1.41%)</title><rect x="0.0000%" y="597" width="1.4085%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="3"/><text x="0.2500%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.94%)</title><rect x="0.4695%" y="581" width="0.9390%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="2"/><text x="0.7195%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.94%)</title><rect x="0.4695%" y="565" width="0.9390%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="2"/><text x="0.7195%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.47%)</title><rect x="0.9390%" y="549" width="0.4695%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="1.1890%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.47%)</title><rect x="0.9390%" y="533" width="0.4695%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="1.1890%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.47%)</title><rect x="0.9390%" y="517" width="0.4695%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="1.1890%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.47%)</title><rect x="0.9390%" y="501" width="0.4695%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="1.1890%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.47%)</title><rect x="0.9390%" y="485" width="0.4695%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="1.1890%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 6.57%)</title><rect x="1.4085%" y="741" width="6.5728%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="14"/><text x="1.6585%" y="751.50">core::has..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 3.29%)</title><rect x="4.6948%" y="725" width="3.2864%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="7"/><text x="4.9448%" y="735.50">cor..</text></g><g><title>&lt;day_20_2017::Point3 as core::hash::Hash&gt;::hash (7 samples, 3.29%)</title><rect x="4.6948%" y="709" width="3.2864%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="7"/><text x="4.9448%" y="719.50">&lt;da..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (7 samples, 3.29%)</title><rect x="4.6948%" y="693" width="3.2864%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="7"/><text x="4.9448%" y="703.50">cor..</text></g><g><title>core::hash::Hasher::write_i32 (10 samples, 4.69%)</title><rect x="7.9812%" y="741" width="4.6948%" height="15" fill="rgb(221,5,38)" fg:x="17" fg:w="10"/><text x="8.2312%" y="751.50">core:..</text></g><g><title>day_20_2017::main (2 samples, 0.94%)</title><rect x="12.6761%" y="741" width="0.9390%" height="15" fill="rgb(247,18,42)" fg:x="27" fg:w="2"/><text x="12.9261%" y="751.50"></text></g><g><title>aoc_util::AocSolver::execute (2 samples, 0.94%)</title><rect x="12.6761%" y="725" width="0.9390%" height="15" fill="rgb(241,131,45)" fg:x="27" fg:w="2"/><text x="12.9261%" y="735.50"></text></g><g><title>&lt;day_20_2017::Temp as aoc_util::AocSolver&gt;::part_2 (2 samples, 0.94%)</title><rect x="12.6761%" y="709" width="0.9390%" height="15" fill="rgb(249,31,29)" fg:x="27" fg:w="2"/><text x="12.9261%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.94%)</title><rect x="12.6761%" y="693" width="0.9390%" height="15" fill="rgb(225,111,53)" fg:x="27" fg:w="2"/><text x="12.9261%" y="703.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.94%)</title><rect x="12.6761%" y="677" width="0.9390%" height="15" fill="rgb(238,160,17)" fg:x="27" fg:w="2"/><text x="12.9261%" y="687.50"></text></g><g><title>hashbrown::map::make_insert_hash (2 samples, 0.94%)</title><rect x="12.6761%" y="661" width="0.9390%" height="15" fill="rgb(214,148,48)" fg:x="27" fg:w="2"/><text x="12.9261%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::retain (1 samples, 0.47%)</title><rect x="13.6150%" y="741" width="0.4695%" height="15" fill="rgb(232,36,49)" fg:x="29" fg:w="1"/><text x="13.8650%" y="751.50"></text></g><g><title>&lt;day_20_2017::Temp as aoc_util::AocSolver&gt;::part_2::{{closure}} (1 samples, 0.47%)</title><rect x="13.6150%" y="725" width="0.4695%" height="15" fill="rgb(209,103,24)" fg:x="29" fg:w="1"/><text x="13.8650%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1 samples, 0.47%)</title><rect x="13.6150%" y="709" width="0.4695%" height="15" fill="rgb(229,88,8)" fg:x="29" fg:w="1"/><text x="13.8650%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.47%)</title><rect x="13.6150%" y="693" width="0.4695%" height="15" fill="rgb(213,181,19)" fg:x="29" fg:w="1"/><text x="13.8650%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.47%)</title><rect x="13.6150%" y="677" width="0.4695%" height="15" fill="rgb(254,191,54)" fg:x="29" fg:w="1"/><text x="13.8650%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.47%)</title><rect x="13.6150%" y="661" width="0.4695%" height="15" fill="rgb(241,83,37)" fg:x="29" fg:w="1"/><text x="13.8650%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.47%)</title><rect x="13.6150%" y="645" width="0.4695%" height="15" fill="rgb(233,36,39)" fg:x="29" fg:w="1"/><text x="13.8650%" y="655.50"></text></g><g><title>[unknown] (28 samples, 13.15%)</title><rect x="1.4085%" y="757" width="13.1455%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="28"/><text x="1.6585%" y="767.50">[unknown]</text></g><g><title>regex_automata::meta::regex::Builder::build (1 samples, 0.47%)</title><rect x="14.0845%" y="741" width="0.4695%" height="15" fill="rgb(245,192,40)" fg:x="30" fg:w="1"/><text x="14.3345%" y="751.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1 samples, 0.47%)</title><rect x="14.0845%" y="725" width="0.4695%" height="15" fill="rgb(238,167,29)" fg:x="30" fg:w="1"/><text x="14.3345%" y="735.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1 samples, 0.47%)</title><rect x="14.0845%" y="709" width="0.4695%" height="15" fill="rgb(232,182,51)" fg:x="30" fg:w="1"/><text x="14.3345%" y="719.50"></text></g><g><title>regex_automata::meta::strategy::new (1 samples, 0.47%)</title><rect x="14.0845%" y="693" width="0.4695%" height="15" fill="rgb(231,60,39)" fg:x="30" fg:w="1"/><text x="14.3345%" y="703.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1 samples, 0.47%)</title><rect x="14.0845%" y="677" width="0.4695%" height="15" fill="rgb(208,69,12)" fg:x="30" fg:w="1"/><text x="14.3345%" y="687.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1 samples, 0.47%)</title><rect x="14.0845%" y="661" width="0.4695%" height="15" fill="rgb(235,93,37)" fg:x="30" fg:w="1"/><text x="14.3345%" y="671.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.47%)</title><rect x="14.0845%" y="645" width="0.4695%" height="15" fill="rgb(213,116,39)" fg:x="30" fg:w="1"/><text x="14.3345%" y="655.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1 samples, 0.47%)</title><rect x="14.0845%" y="629" width="0.4695%" height="15" fill="rgb(222,207,29)" fg:x="30" fg:w="1"/><text x="14.3345%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.47%)</title><rect x="14.0845%" y="613" width="0.4695%" height="15" fill="rgb(206,96,30)" fg:x="30" fg:w="1"/><text x="14.3345%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.47%)</title><rect x="14.0845%" y="597" width="0.4695%" height="15" fill="rgb(218,138,4)" fg:x="30" fg:w="1"/><text x="14.3345%" y="607.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.47%)</title><rect x="14.0845%" y="581" width="0.4695%" height="15" fill="rgb(250,191,14)" fg:x="30" fg:w="1"/><text x="14.3345%" y="591.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (1 samples, 0.47%)</title><rect x="14.0845%" y="565" width="0.4695%" height="15" fill="rgb(239,60,40)" fg:x="30" fg:w="1"/><text x="14.3345%" y="575.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.47%)</title><rect x="14.0845%" y="549" width="0.4695%" height="15" fill="rgb(206,27,48)" fg:x="30" fg:w="1"/><text x="14.3345%" y="559.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.47%)</title><rect x="14.0845%" y="533" width="0.4695%" height="15" fill="rgb(225,35,8)" fg:x="30" fg:w="1"/><text x="14.3345%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1 samples, 0.47%)</title><rect x="14.0845%" y="517" width="0.4695%" height="15" fill="rgb(250,213,24)" fg:x="30" fg:w="1"/><text x="14.3345%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.47%)</title><rect x="14.0845%" y="501" width="0.4695%" height="15" fill="rgb(247,123,22)" fg:x="30" fg:w="1"/><text x="14.3345%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.47%)</title><rect x="14.0845%" y="485" width="0.4695%" height="15" fill="rgb(231,138,38)" fg:x="30" fg:w="1"/><text x="14.3345%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.47%)</title><rect x="14.0845%" y="469" width="0.4695%" height="15" fill="rgb(231,145,46)" fg:x="30" fg:w="1"/><text x="14.3345%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (1 samples, 0.47%)</title><rect x="14.0845%" y="453" width="0.4695%" height="15" fill="rgb(251,118,11)" fg:x="30" fg:w="1"/><text x="14.3345%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.47%)</title><rect x="14.0845%" y="437" width="0.4695%" height="15" fill="rgb(217,147,25)" fg:x="30" fg:w="1"/><text x="14.3345%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.47%)</title><rect x="14.0845%" y="421" width="0.4695%" height="15" fill="rgb(247,81,37)" fg:x="30" fg:w="1"/><text x="14.3345%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.47%)</title><rect x="14.0845%" y="405" width="0.4695%" height="15" fill="rgb(209,12,38)" fg:x="30" fg:w="1"/><text x="14.3345%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1 samples, 0.47%)</title><rect x="14.0845%" y="389" width="0.4695%" height="15" fill="rgb(227,1,9)" fg:x="30" fg:w="1"/><text x="14.3345%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1 samples, 0.47%)</title><rect x="14.0845%" y="373" width="0.4695%" height="15" fill="rgb(248,47,43)" fg:x="30" fg:w="1"/><text x="14.3345%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (1 samples, 0.47%)</title><rect x="14.0845%" y="357" width="0.4695%" height="15" fill="rgb(221,10,30)" fg:x="30" fg:w="1"/><text x="14.3345%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1 samples, 0.47%)</title><rect x="14.0845%" y="341" width="0.4695%" height="15" fill="rgb(210,229,1)" fg:x="30" fg:w="1"/><text x="14.3345%" y="351.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.47%)</title><rect x="14.0845%" y="325" width="0.4695%" height="15" fill="rgb(222,148,37)" fg:x="30" fg:w="1"/><text x="14.3345%" y="335.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.47%)</title><rect x="14.0845%" y="309" width="0.4695%" height="15" fill="rgb(234,67,33)" fg:x="30" fg:w="1"/><text x="14.3345%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.47%)</title><rect x="14.0845%" y="293" width="0.4695%" height="15" fill="rgb(247,98,35)" fg:x="30" fg:w="1"/><text x="14.3345%" y="303.50"></text></g><g><title>core::ptr::write (1 samples, 0.47%)</title><rect x="14.0845%" y="277" width="0.4695%" height="15" fill="rgb(247,138,52)" fg:x="30" fg:w="1"/><text x="14.3345%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.47%)</title><rect x="14.0845%" y="261" width="0.4695%" height="15" fill="rgb(213,79,30)" fg:x="30" fg:w="1"/><text x="14.3345%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.47%)</title><rect x="14.0845%" y="245" width="0.4695%" height="15" fill="rgb(246,177,23)" fg:x="30" fg:w="1"/><text x="14.3345%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.47%)</title><rect x="14.0845%" y="229" width="0.4695%" height="15" fill="rgb(230,62,27)" fg:x="30" fg:w="1"/><text x="14.3345%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.47%)</title><rect x="14.0845%" y="213" width="0.4695%" height="15" fill="rgb(216,154,8)" fg:x="30" fg:w="1"/><text x="14.3345%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.47%)</title><rect x="14.0845%" y="197" width="0.4695%" height="15" fill="rgb(244,35,45)" fg:x="30" fg:w="1"/><text x="14.3345%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.47%)</title><rect x="14.0845%" y="181" width="0.4695%" height="15" fill="rgb(251,115,12)" fg:x="30" fg:w="1"/><text x="14.3345%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.47%)</title><rect x="14.0845%" y="165" width="0.4695%" height="15" fill="rgb(240,54,50)" fg:x="30" fg:w="1"/><text x="14.3345%" y="175.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.47%)</title><rect x="14.5540%" y="341" width="0.4695%" height="15" fill="rgb(233,84,52)" fg:x="31" fg:w="1"/><text x="14.8040%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.47%)</title><rect x="14.5540%" y="325" width="0.4695%" height="15" fill="rgb(207,117,47)" fg:x="31" fg:w="1"/><text x="14.8040%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.47%)</title><rect x="14.5540%" y="309" width="0.4695%" height="15" fill="rgb(249,43,39)" fg:x="31" fg:w="1"/><text x="14.8040%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.47%)</title><rect x="14.5540%" y="293" width="0.4695%" height="15" fill="rgb(209,38,44)" fg:x="31" fg:w="1"/><text x="14.8040%" y="303.50"></text></g><g><title>&lt;core::str::LinesAnyMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (1 samples, 0.47%)</title><rect x="14.5540%" y="277" width="0.4695%" height="15" fill="rgb(236,212,23)" fg:x="31" fg:w="1"/><text x="14.8040%" y="287.50"></text></g><g><title>&lt;core::str::LinesAnyMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (1 samples, 0.47%)</title><rect x="14.5540%" y="261" width="0.4695%" height="15" fill="rgb(242,79,21)" fg:x="31" fg:w="1"/><text x="14.8040%" y="271.50"></text></g><g><title>day_20_2017::parse_point_3 (2 samples, 0.94%)</title><rect x="15.0235%" y="293" width="0.9390%" height="15" fill="rgb(211,96,35)" fg:x="32" fg:w="2"/><text x="15.2735%" y="303.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.94%)</title><rect x="15.0235%" y="277" width="0.9390%" height="15" fill="rgb(253,215,40)" fg:x="32" fg:w="2"/><text x="15.2735%" y="287.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (2 samples, 0.94%)</title><rect x="15.0235%" y="261" width="0.9390%" height="15" fill="rgb(211,81,21)" fg:x="32" fg:w="2"/><text x="15.2735%" y="271.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (2 samples, 0.94%)</title><rect x="15.0235%" y="245" width="0.9390%" height="15" fill="rgb(208,190,38)" fg:x="32" fg:w="2"/><text x="15.2735%" y="255.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (1 samples, 0.47%)</title><rect x="15.4930%" y="229" width="0.4695%" height="15" fill="rgb(235,213,38)" fg:x="33" fg:w="1"/><text x="15.7430%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::backtrack::Visited::insert (1 samples, 0.47%)</title><rect x="18.3099%" y="101" width="0.4695%" height="15" fill="rgb(237,122,38)" fg:x="39" fg:w="1"/><text x="18.5599%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (11 samples, 5.16%)</title><rect x="14.5540%" y="453" width="5.1643%" height="15" fill="rgb(244,218,35)" fg:x="31" fg:w="11"/><text x="14.8040%" y="463.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (11 samples, 5.16%)</title><rect x="14.5540%" y="437" width="5.1643%" height="15" fill="rgb(240,68,47)" fg:x="31" fg:w="11"/><text x="14.8040%" y="447.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 5.16%)</title><rect x="14.5540%" y="421" width="5.1643%" height="15" fill="rgb(210,16,53)" fg:x="31" fg:w="11"/><text x="14.8040%" y="431.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (11 samples, 5.16%)</title><rect x="14.5540%" y="405" width="5.1643%" height="15" fill="rgb(235,124,12)" fg:x="31" fg:w="11"/><text x="14.8040%" y="415.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (11 samples, 5.16%)</title><rect x="14.5540%" y="389" width="5.1643%" height="15" fill="rgb(224,169,11)" fg:x="31" fg:w="11"/><text x="14.8040%" y="399.50">&lt;alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (11 samples, 5.16%)</title><rect x="14.5540%" y="373" width="5.1643%" height="15" fill="rgb(250,166,2)" fg:x="31" fg:w="11"/><text x="14.8040%" y="383.50">alloc:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 5.16%)</title><rect x="14.5540%" y="357" width="5.1643%" height="15" fill="rgb(242,216,29)" fg:x="31" fg:w="11"/><text x="14.8040%" y="367.50">&lt;core:..</text></g><g><title>core::option::Option&lt;T&gt;::map (10 samples, 4.69%)</title><rect x="15.0235%" y="341" width="4.6948%" height="15" fill="rgb(230,116,27)" fg:x="32" fg:w="10"/><text x="15.2735%" y="351.50">core:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (10 samples, 4.69%)</title><rect x="15.0235%" y="325" width="4.6948%" height="15" fill="rgb(228,99,48)" fg:x="32" fg:w="10"/><text x="15.2735%" y="335.50">core:..</text></g><g><title>&lt;day_20_2017::Temp as aoc_util::AocSolver&gt;::part_1::{{closure}} (10 samples, 4.69%)</title><rect x="15.0235%" y="309" width="4.6948%" height="15" fill="rgb(253,11,6)" fg:x="32" fg:w="10"/><text x="15.2735%" y="319.50">&lt;day_..</text></g><g><title>regex::regex::string::Regex::captures (8 samples, 3.76%)</title><rect x="15.9624%" y="293" width="3.7559%" height="15" fill="rgb(247,143,39)" fg:x="34" fg:w="8"/><text x="16.2124%" y="303.50">rege..</text></g><g><title>regex::regex::string::Regex::captures_at (8 samples, 3.76%)</title><rect x="15.9624%" y="277" width="3.7559%" height="15" fill="rgb(236,97,10)" fg:x="34" fg:w="8"/><text x="16.2124%" y="287.50">rege..</text></g><g><title>regex_automata::meta::regex::Regex::search_captures (8 samples, 3.76%)</title><rect x="15.9624%" y="261" width="3.7559%" height="15" fill="rgb(233,208,19)" fg:x="34" fg:w="8"/><text x="16.2124%" y="271.50">rege..</text></g><g><title>regex_automata::meta::regex::Regex::search_slots (8 samples, 3.76%)</title><rect x="15.9624%" y="245" width="3.7559%" height="15" fill="rgb(216,164,2)" fg:x="34" fg:w="8"/><text x="16.2124%" y="255.50">rege..</text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (8 samples, 3.76%)</title><rect x="15.9624%" y="229" width="3.7559%" height="15" fill="rgb(220,129,5)" fg:x="34" fg:w="8"/><text x="16.2124%" y="239.50">&lt;reg..</text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (8 samples, 3.76%)</title><rect x="15.9624%" y="213" width="3.7559%" height="15" fill="rgb(242,17,10)" fg:x="34" fg:w="8"/><text x="16.2124%" y="223.50">rege..</text></g><g><title>regex_automata::meta::wrappers::BoundedBacktrackerEngine::search_slots (8 samples, 3.76%)</title><rect x="15.9624%" y="197" width="3.7559%" height="15" fill="rgb(242,107,0)" fg:x="34" fg:w="8"/><text x="16.2124%" y="207.50">rege..</text></g><g><title>regex_automata::nfa::thompson::backtrack::BoundedBacktracker::try_search_slots (8 samples, 3.76%)</title><rect x="15.9624%" y="181" width="3.7559%" height="15" fill="rgb(251,28,31)" fg:x="34" fg:w="8"/><text x="16.2124%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::backtrack::BoundedBacktracker::try_search_slots_imp (8 samples, 3.76%)</title><rect x="15.9624%" y="165" width="3.7559%" height="15" fill="rgb(233,223,10)" fg:x="34" fg:w="8"/><text x="16.2124%" y="175.50">rege..</text></g><g><title>regex_automata::nfa::thompson::backtrack::BoundedBacktracker::search_imp (8 samples, 3.76%)</title><rect x="15.9624%" y="149" width="3.7559%" height="15" fill="rgb(215,21,27)" fg:x="34" fg:w="8"/><text x="16.2124%" y="159.50">rege..</text></g><g><title>regex_automata::nfa::thompson::backtrack::BoundedBacktracker::backtrack (8 samples, 3.76%)</title><rect x="15.9624%" y="133" width="3.7559%" height="15" fill="rgb(232,23,21)" fg:x="34" fg:w="8"/><text x="16.2124%" y="143.50">rege..</text></g><g><title>regex_automata::nfa::thompson::backtrack::BoundedBacktracker::step (7 samples, 3.29%)</title><rect x="16.4319%" y="117" width="3.2864%" height="15" fill="rgb(244,5,23)" fg:x="35" fg:w="7"/><text x="16.6819%" y="127.50">reg..</text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches (2 samples, 0.94%)</title><rect x="18.7793%" y="101" width="0.9390%" height="15" fill="rgb(226,81,46)" fg:x="40" fg:w="2"/><text x="19.0293%" y="111.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2 samples, 0.94%)</title><rect x="18.7793%" y="85" width="0.9390%" height="15" fill="rgb(247,70,30)" fg:x="40" fg:w="2"/><text x="19.0293%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches::{{closure}} (2 samples, 0.94%)</title><rect x="18.7793%" y="69" width="0.9390%" height="15" fill="rgb(212,68,19)" fg:x="40" fg:w="2"/><text x="19.0293%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches_byte (2 samples, 0.94%)</title><rect x="18.7793%" y="53" width="0.9390%" height="15" fill="rgb(240,187,13)" fg:x="40" fg:w="2"/><text x="19.0293%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Transition::matches_byte (1 samples, 0.47%)</title><rect x="19.2488%" y="37" width="0.4695%" height="15" fill="rgb(223,113,26)" fg:x="41" fg:w="1"/><text x="19.4988%" y="47.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1 samples, 0.47%)</title><rect x="19.7183%" y="341" width="0.4695%" height="15" fill="rgb(206,192,2)" fg:x="42" fg:w="1"/><text x="19.9683%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.47%)</title><rect x="19.7183%" y="325" width="0.4695%" height="15" fill="rgb(241,108,4)" fg:x="42" fg:w="1"/><text x="19.9683%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.47%)</title><rect x="19.7183%" y="309" width="0.4695%" height="15" fill="rgb(247,173,49)" fg:x="42" fg:w="1"/><text x="19.9683%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.47%)</title><rect x="19.7183%" y="293" width="0.4695%" height="15" fill="rgb(224,114,35)" fg:x="42" fg:w="1"/><text x="19.9683%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt; (1 samples, 0.47%)</title><rect x="19.7183%" y="277" width="0.4695%" height="15" fill="rgb(245,159,27)" fg:x="42" fg:w="1"/><text x="19.9683%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedMap&gt; (1 samples, 0.47%)</title><rect x="19.7183%" y="261" width="0.4695%" height="15" fill="rgb(245,172,44)" fg:x="42" fg:w="1"/><text x="19.9683%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (1 samples, 0.47%)</title><rect x="19.7183%" y="245" width="0.4695%" height="15" fill="rgb(236,23,11)" fg:x="42" fg:w="1"/><text x="19.9683%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.47%)</title><rect x="19.7183%" y="229" width="0.4695%" height="15" fill="rgb(205,117,38)" fg:x="42" fg:w="1"/><text x="19.9683%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::map::Utf8BoundedEntry]&gt; (1 samples, 0.47%)</title><rect x="19.7183%" y="213" width="0.4695%" height="15" fill="rgb(237,72,25)" fg:x="42" fg:w="1"/><text x="19.9683%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt; (1 samples, 0.47%)</title><rect x="19.7183%" y="197" width="0.4695%" height="15" fill="rgb(244,70,9)" fg:x="42" fg:w="1"/><text x="19.9683%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (1 samples, 0.47%)</title><rect x="19.7183%" y="181" width="0.4695%" height="15" fill="rgb(217,125,39)" fg:x="42" fg:w="1"/><text x="19.9683%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (1 samples, 0.47%)</title><rect x="19.7183%" y="165" width="0.4695%" height="15" fill="rgb(235,36,10)" fg:x="42" fg:w="1"/><text x="19.9683%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.47%)</title><rect x="19.7183%" y="149" width="0.4695%" height="15" fill="rgb(251,123,47)" fg:x="42" fg:w="1"/><text x="19.9683%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.47%)</title><rect x="19.7183%" y="133" width="0.4695%" height="15" fill="rgb(221,13,13)" fg:x="42" fg:w="1"/><text x="19.9683%" y="143.50"></text></g><g><title>&lt;day_20_2017::Temp as aoc_util::AocSolver&gt;::part_1 (13 samples, 6.10%)</title><rect x="14.5540%" y="469" width="6.1033%" height="15" fill="rgb(238,131,9)" fg:x="31" fg:w="13"/><text x="14.8040%" y="479.50">&lt;day_20_..</text></g><g><title>regex::regex::string::Regex::new (2 samples, 0.94%)</title><rect x="19.7183%" y="453" width="0.9390%" height="15" fill="rgb(211,50,8)" fg:x="42" fg:w="2"/><text x="19.9683%" y="463.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (2 samples, 0.94%)</title><rect x="19.7183%" y="437" width="0.9390%" height="15" fill="rgb(245,182,24)" fg:x="42" fg:w="2"/><text x="19.9683%" y="447.50"></text></g><g><title>regex::builders::Builder::build_one_string (2 samples, 0.94%)</title><rect x="19.7183%" y="421" width="0.9390%" height="15" fill="rgb(242,14,37)" fg:x="42" fg:w="2"/><text x="19.9683%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (2 samples, 0.94%)</title><rect x="19.7183%" y="405" width="0.9390%" height="15" fill="rgb(246,228,12)" fg:x="42" fg:w="2"/><text x="19.9683%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (2 samples, 0.94%)</title><rect x="19.7183%" y="389" width="0.9390%" height="15" fill="rgb(213,55,15)" fg:x="42" fg:w="2"/><text x="19.9683%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (2 samples, 0.94%)</title><rect x="19.7183%" y="373" width="0.9390%" height="15" fill="rgb(209,9,3)" fg:x="42" fg:w="2"/><text x="19.9683%" y="383.50"></text></g><g><title>regex_automata::meta::strategy::new (2 samples, 0.94%)</title><rect x="19.7183%" y="357" width="0.9390%" height="15" fill="rgb(230,59,30)" fg:x="42" fg:w="2"/><text x="19.9683%" y="367.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.47%)</title><rect x="20.1878%" y="341" width="0.4695%" height="15" fill="rgb(209,121,21)" fg:x="43" fg:w="1"/><text x="20.4378%" y="351.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.47%)</title><rect x="20.1878%" y="325" width="0.4695%" height="15" fill="rgb(220,109,13)" fg:x="43" fg:w="1"/><text x="20.4378%" y="335.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract_concat (1 samples, 0.47%)</title><rect x="20.1878%" y="309" width="0.4695%" height="15" fill="rgb(232,18,1)" fg:x="43" fg:w="1"/><text x="20.4378%" y="319.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::cross (1 samples, 0.47%)</title><rect x="20.1878%" y="293" width="0.4695%" height="15" fill="rgb(215,41,42)" fg:x="43" fg:w="1"/><text x="20.4378%" y="303.50"></text></g><g><title>regex_syntax::hir::literal::Seq::cross_forward (1 samples, 0.47%)</title><rect x="20.1878%" y="277" width="0.4695%" height="15" fill="rgb(224,123,36)" fg:x="43" fg:w="1"/><text x="20.4378%" y="287.50"></text></g><g><title>core::mem::replace (1 samples, 0.47%)</title><rect x="20.1878%" y="261" width="0.4695%" height="15" fill="rgb(240,125,3)" fg:x="43" fg:w="1"/><text x="20.4378%" y="271.50"></text></g><g><title>core::ptr::read (1 samples, 0.47%)</title><rect x="20.1878%" y="245" width="0.4695%" height="15" fill="rgb(205,98,50)" fg:x="43" fg:w="1"/><text x="20.4378%" y="255.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.47%)</title><rect x="20.1878%" y="229" width="0.4695%" height="15" fill="rgb(205,185,37)" fg:x="43" fg:w="1"/><text x="20.4378%" y="239.50"></text></g><g><title>&lt;day_20_2017::Point3 as core::ops::arith::Add&gt;::add (1 samples, 0.47%)</title><rect x="23.9437%" y="453" width="0.4695%" height="15" fill="rgb(238,207,15)" fg:x="51" fg:w="1"/><text x="24.1937%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.88%)</title><rect x="24.4131%" y="453" width="1.8779%" height="15" fill="rgb(213,199,42)" fg:x="52" fg:w="4"/><text x="24.6631%" y="463.50">&lt;..</text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.88%)</title><rect x="24.4131%" y="437" width="1.8779%" height="15" fill="rgb(235,201,11)" fg:x="52" fg:w="4"/><text x="24.6631%" y="447.50">&lt;..</text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.88%)</title><rect x="24.4131%" y="421" width="1.8779%" height="15" fill="rgb(207,46,11)" fg:x="52" fg:w="4"/><text x="24.6631%" y="431.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.47%)</title><rect x="26.2911%" y="101" width="0.4695%" height="15" fill="rgb(241,35,35)" fg:x="56" fg:w="1"/><text x="26.5411%" y="111.50"></text></g><g><title>core::ptr::write (1 samples, 0.47%)</title><rect x="26.2911%" y="85" width="0.4695%" height="15" fill="rgb(243,32,47)" fg:x="56" fg:w="1"/><text x="26.5411%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.94%)</title><rect x="27.6995%" y="85" width="0.9390%" height="15" fill="rgb(247,202,23)" fg:x="59" fg:w="2"/><text x="27.9495%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::backtrack::Visited::insert (2 samples, 0.94%)</title><rect x="28.6385%" y="85" width="0.9390%" height="15" fill="rgb(219,102,11)" fg:x="61" fg:w="2"/><text x="28.8885%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::states (1 samples, 0.47%)</title><rect x="29.5775%" y="69" width="0.4695%" height="15" fill="rgb(243,110,44)" fg:x="63" fg:w="1"/><text x="29.8275%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::state (2 samples, 0.94%)</title><rect x="29.5775%" y="85" width="0.9390%" height="15" fill="rgb(222,74,54)" fg:x="63" fg:w="2"/><text x="29.8275%" y="95.50"></text></g><g><title>regex_automata::util::primitives::&lt;impl core::ops::index::Index&lt;regex_automata::util::primitives::StateID&gt; for [T]&gt;::index (1 samples, 0.47%)</title><rect x="30.0469%" y="69" width="0.4695%" height="15" fill="rgb(216,99,12)" fg:x="64" fg:w="1"/><text x="30.2969%" y="79.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (10 samples, 4.69%)</title><rect x="26.2911%" y="197" width="4.6948%" height="15" fill="rgb(226,22,26)" fg:x="56" fg:w="10"/><text x="26.5411%" y="207.50">regex..</text></g><g><title>regex_automata::meta::wrappers::BoundedBacktrackerEngine::search_slots (10 samples, 4.69%)</title><rect x="26.2911%" y="181" width="4.6948%" height="15" fill="rgb(217,163,10)" fg:x="56" fg:w="10"/><text x="26.5411%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::backtrack::BoundedBacktracker::try_search_slots (10 samples, 4.69%)</title><rect x="26.2911%" y="165" width="4.6948%" height="15" fill="rgb(213,25,53)" fg:x="56" fg:w="10"/><text x="26.5411%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::backtrack::BoundedBacktracker::try_search_slots_imp (10 samples, 4.69%)</title><rect x="26.2911%" y="149" width="4.6948%" height="15" fill="rgb(252,105,26)" fg:x="56" fg:w="10"/><text x="26.5411%" y="159.50">regex..</text></g><g><title>regex_automata::nfa::thompson::backtrack::BoundedBacktracker::search_imp (10 samples, 4.69%)</title><rect x="26.2911%" y="133" width="4.6948%" height="15" fill="rgb(220,39,43)" fg:x="56" fg:w="10"/><text x="26.5411%" y="143.50">regex..</text></g><g><title>regex_automata::nfa::thompson::backtrack::BoundedBacktracker::backtrack (10 samples, 4.69%)</title><rect x="26.2911%" y="117" width="4.6948%" height="15" fill="rgb(229,68,48)" fg:x="56" fg:w="10"/><text x="26.5411%" y="127.50">regex..</text></g><g><title>regex_automata::nfa::thompson::backtrack::BoundedBacktracker::step (9 samples, 4.23%)</title><rect x="26.7606%" y="101" width="4.2254%" height="15" fill="rgb(252,8,32)" fg:x="57" fg:w="9"/><text x="27.0106%" y="111.50">regex..</text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches (1 samples, 0.47%)</title><rect x="30.5164%" y="85" width="0.4695%" height="15" fill="rgb(223,20,43)" fg:x="65" fg:w="1"/><text x="30.7664%" y="95.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.47%)</title><rect x="30.5164%" y="69" width="0.4695%" height="15" fill="rgb(229,81,49)" fg:x="65" fg:w="1"/><text x="30.7664%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches::{{closure}} (1 samples, 0.47%)</title><rect x="30.5164%" y="53" width="0.4695%" height="15" fill="rgb(236,28,36)" fg:x="65" fg:w="1"/><text x="30.7664%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches_byte (1 samples, 0.47%)</title><rect x="30.5164%" y="37" width="0.4695%" height="15" fill="rgb(249,185,26)" fg:x="65" fg:w="1"/><text x="30.7664%" y="47.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::try_search_fwd (1 samples, 0.47%)</title><rect x="30.9859%" y="149" width="0.4695%" height="15" fill="rgb(249,174,33)" fg:x="66" fg:w="1"/><text x="31.2359%" y="159.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.47%)</title><rect x="30.9859%" y="133" width="0.4695%" height="15" fill="rgb(233,201,37)" fg:x="66" fg:w="1"/><text x="31.2359%" y="143.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd_imp (1 samples, 0.47%)</title><rect x="30.9859%" y="117" width="0.4695%" height="15" fill="rgb(221,78,26)" fg:x="66" fg:w="1"/><text x="31.2359%" y="127.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::next_state_untagged_unchecked (1 samples, 0.47%)</title><rect x="30.9859%" y="101" width="0.4695%" height="15" fill="rgb(250,127,30)" fg:x="66" fg:w="1"/><text x="31.2359%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (12 samples, 5.63%)</title><rect x="26.2911%" y="453" width="5.6338%" height="15" fill="rgb(230,49,44)" fg:x="56" fg:w="12"/><text x="26.5411%" y="463.50">core::i..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (12 samples, 5.63%)</title><rect x="26.2911%" y="437" width="5.6338%" height="15" fill="rgb(229,67,23)" fg:x="56" fg:w="12"/><text x="26.5411%" y="447.50">&lt;std::c..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (12 samples, 5.63%)</title><rect x="26.2911%" y="421" width="5.6338%" height="15" fill="rgb(249,83,47)" fg:x="56" fg:w="12"/><text x="26.5411%" y="431.50">&lt;std::c..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (12 samples, 5.63%)</title><rect x="26.2911%" y="405" width="5.6338%" height="15" fill="rgb(215,43,3)" fg:x="56" fg:w="12"/><text x="26.5411%" y="415.50">&lt;hashbr..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (12 samples, 5.63%)</title><rect x="26.2911%" y="389" width="5.6338%" height="15" fill="rgb(238,154,13)" fg:x="56" fg:w="12"/><text x="26.5411%" y="399.50">core::i..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 5.63%)</title><rect x="26.2911%" y="373" width="5.6338%" height="15" fill="rgb(219,56,2)" fg:x="56" fg:w="12"/><text x="26.5411%" y="383.50">&lt;core::..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 5.63%)</title><rect x="26.2911%" y="357" width="5.6338%" height="15" fill="rgb(233,0,4)" fg:x="56" fg:w="12"/><text x="26.5411%" y="367.50">&lt;core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (12 samples, 5.63%)</title><rect x="26.2911%" y="341" width="5.6338%" height="15" fill="rgb(235,30,7)" fg:x="56" fg:w="12"/><text x="26.5411%" y="351.50">core::i..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (12 samples, 5.63%)</title><rect x="26.2911%" y="325" width="5.6338%" height="15" fill="rgb(250,79,13)" fg:x="56" fg:w="12"/><text x="26.5411%" y="335.50">&lt;core::..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (12 samples, 5.63%)</title><rect x="26.2911%" y="309" width="5.6338%" height="15" fill="rgb(211,146,34)" fg:x="56" fg:w="12"/><text x="26.5411%" y="319.50">core::i..</text></g><g><title>&lt;day_20_2017::Temp as aoc_util::AocSolver&gt;::part_2::{{closure}} (12 samples, 5.63%)</title><rect x="26.2911%" y="293" width="5.6338%" height="15" fill="rgb(228,22,38)" fg:x="56" fg:w="12"/><text x="26.5411%" y="303.50">&lt;day_20..</text></g><g><title>regex::regex::string::Regex::captures (12 samples, 5.63%)</title><rect x="26.2911%" y="277" width="5.6338%" height="15" fill="rgb(235,168,5)" fg:x="56" fg:w="12"/><text x="26.5411%" y="287.50">regex::..</text></g><g><title>regex::regex::string::Regex::captures_at (12 samples, 5.63%)</title><rect x="26.2911%" y="261" width="5.6338%" height="15" fill="rgb(221,155,16)" fg:x="56" fg:w="12"/><text x="26.5411%" y="271.50">regex::..</text></g><g><title>regex_automata::meta::regex::Regex::search_captures (12 samples, 5.63%)</title><rect x="26.2911%" y="245" width="5.6338%" height="15" fill="rgb(215,215,53)" fg:x="56" fg:w="12"/><text x="26.5411%" y="255.50">regex_a..</text></g><g><title>regex_automata::meta::regex::Regex::search_slots (12 samples, 5.63%)</title><rect x="26.2911%" y="229" width="5.6338%" height="15" fill="rgb(223,4,10)" fg:x="56" fg:w="12"/><text x="26.5411%" y="239.50">regex_a..</text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (12 samples, 5.63%)</title><rect x="26.2911%" y="213" width="5.6338%" height="15" fill="rgb(234,103,6)" fg:x="56" fg:w="12"/><text x="26.5411%" y="223.50">&lt;regex_..</text></g><g><title>regex_automata::meta::strategy::Core::try_search_mayfail (2 samples, 0.94%)</title><rect x="30.9859%" y="197" width="0.9390%" height="15" fill="rgb(227,97,0)" fg:x="66" fg:w="2"/><text x="31.2359%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::HybridEngine::try_search (2 samples, 0.94%)</title><rect x="30.9859%" y="181" width="0.9390%" height="15" fill="rgb(234,150,53)" fg:x="66" fg:w="2"/><text x="31.2359%" y="191.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.94%)</title><rect x="30.9859%" y="165" width="0.9390%" height="15" fill="rgb(228,201,54)" fg:x="66" fg:w="2"/><text x="31.2359%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::try_search_rev (1 samples, 0.47%)</title><rect x="31.4554%" y="149" width="0.4695%" height="15" fill="rgb(222,22,37)" fg:x="67" fg:w="1"/><text x="31.7054%" y="159.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.47%)</title><rect x="31.4554%" y="133" width="0.4695%" height="15" fill="rgb(237,53,32)" fg:x="67" fg:w="1"/><text x="31.7054%" y="143.50"></text></g><g><title>regex_automata::hybrid::search::find_rev_imp (1 samples, 0.47%)</title><rect x="31.4554%" y="117" width="0.4695%" height="15" fill="rgb(233,25,53)" fg:x="67" fg:w="1"/><text x="31.7054%" y="127.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::next_state_untagged_unchecked (1 samples, 0.47%)</title><rect x="31.4554%" y="101" width="0.4695%" height="15" fill="rgb(210,40,34)" fg:x="67" fg:w="1"/><text x="31.7054%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;day_20_2017::Point3,i32&gt;&gt; (1 samples, 0.47%)</title><rect x="31.9249%" y="453" width="0.4695%" height="15" fill="rgb(241,220,44)" fg:x="68" fg:w="1"/><text x="32.1749%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;day_20_2017::Point3,i32,std::collections::hash::map::RandomState&gt;&gt; (1 samples, 0.47%)</title><rect x="31.9249%" y="437" width="0.4695%" height="15" fill="rgb(235,28,35)" fg:x="68" fg:w="1"/><text x="32.1749%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(day_20_2017::Point3,i32)&gt;&gt; (1 samples, 0.47%)</title><rect x="31.9249%" y="421" width="0.4695%" height="15" fill="rgb(210,56,17)" fg:x="68" fg:w="1"/><text x="32.1749%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.47%)</title><rect x="31.9249%" y="405" width="0.4695%" height="15" fill="rgb(224,130,29)" fg:x="68" fg:w="1"/><text x="32.1749%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (1 samples, 0.47%)</title><rect x="31.9249%" y="389" width="0.4695%" height="15" fill="rgb(235,212,8)" fg:x="68" fg:w="1"/><text x="32.1749%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (1 samples, 0.47%)</title><rect x="31.9249%" y="373" width="0.4695%" height="15" fill="rgb(223,33,50)" fg:x="68" fg:w="1"/><text x="32.1749%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.47%)</title><rect x="31.9249%" y="357" width="0.4695%" height="15" fill="rgb(219,149,13)" fg:x="68" fg:w="1"/><text x="32.1749%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.47%)</title><rect x="31.9249%" y="341" width="0.4695%" height="15" fill="rgb(250,156,29)" fg:x="68" fg:w="1"/><text x="32.1749%" y="351.50"></text></g><g><title>__GI___libc_free (1 samples, 0.47%)</title><rect x="31.9249%" y="325" width="0.4695%" height="15" fill="rgb(216,193,19)" fg:x="68" fg:w="1"/><text x="32.1749%" y="335.50"></text></g><g><title>_int_free (1 samples, 0.47%)</title><rect x="31.9249%" y="309" width="0.4695%" height="15" fill="rgb(216,135,14)" fg:x="68" fg:w="1"/><text x="32.1749%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.47%)</title><rect x="33.3333%" y="389" width="0.4695%" height="15" fill="rgb(241,47,5)" fg:x="71" fg:w="1"/><text x="33.5833%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.47%)</title><rect x="33.3333%" y="373" width="0.4695%" height="15" fill="rgb(233,42,35)" fg:x="71" fg:w="1"/><text x="33.5833%" y="383.50"></text></g><g><title>core::ptr::write (1 samples, 0.47%)</title><rect x="33.3333%" y="357" width="0.4695%" height="15" fill="rgb(231,13,6)" fg:x="71" fg:w="1"/><text x="33.5833%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (3 samples, 1.41%)</title><rect x="33.8028%" y="373" width="1.4085%" height="15" fill="rgb(207,181,40)" fg:x="72" fg:w="3"/><text x="34.0528%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (7 samples, 3.29%)</title><rect x="33.8028%" y="389" width="3.2864%" height="15" fill="rgb(254,173,49)" fg:x="72" fg:w="7"/><text x="34.0528%" y="399.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (4 samples, 1.88%)</title><rect x="35.2113%" y="373" width="1.8779%" height="15" fill="rgb(221,1,38)" fg:x="75" fg:w="4"/><text x="35.4613%" y="383.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (4 samples, 1.88%)</title><rect x="35.2113%" y="357" width="1.8779%" height="15" fill="rgb(206,124,46)" fg:x="75" fg:w="4"/><text x="35.4613%" y="367.50">h..</text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (11 samples, 5.16%)</title><rect x="32.3944%" y="453" width="5.1643%" height="15" fill="rgb(249,21,11)" fg:x="69" fg:w="11"/><text x="32.6444%" y="463.50">std::c..</text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (11 samples, 5.16%)</title><rect x="32.3944%" y="437" width="5.1643%" height="15" fill="rgb(222,201,40)" fg:x="69" fg:w="11"/><text x="32.6444%" y="447.50">std::c..</text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (11 samples, 5.16%)</title><rect x="32.3944%" y="421" width="5.1643%" height="15" fill="rgb(235,61,29)" fg:x="69" fg:w="11"/><text x="32.6444%" y="431.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (11 samples, 5.16%)</title><rect x="32.3944%" y="405" width="5.1643%" height="15" fill="rgb(219,207,3)" fg:x="69" fg:w="11"/><text x="32.6444%" y="415.50">hashbr..</text></g><g><title>hashbrown::raw::special_is_empty (1 samples, 0.47%)</title><rect x="37.0892%" y="389" width="0.4695%" height="15" fill="rgb(222,56,46)" fg:x="79" fg:w="1"/><text x="37.3392%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.94%)</title><rect x="41.3146%" y="325" width="0.9390%" height="15" fill="rgb(239,76,54)" fg:x="88" fg:w="2"/><text x="41.5646%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 2.82%)</title><rect x="40.8451%" y="341" width="2.8169%" height="15" fill="rgb(231,124,27)" fg:x="87" fg:w="6"/><text x="41.0951%" y="351.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 1.41%)</title><rect x="42.2535%" y="325" width="1.4085%" height="15" fill="rgb(249,195,6)" fg:x="90" fg:w="3"/><text x="42.5035%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.47%)</title><rect x="44.1315%" y="325" width="0.4695%" height="15" fill="rgb(237,174,47)" fg:x="94" fg:w="1"/><text x="44.3815%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (19 samples, 8.92%)</title><rect x="38.9671%" y="389" width="8.9202%" height="15" fill="rgb(206,201,31)" fg:x="83" fg:w="19"/><text x="39.2171%" y="399.50">&lt;std::collect..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (19 samples, 8.92%)</title><rect x="38.9671%" y="373" width="8.9202%" height="15" fill="rgb(231,57,52)" fg:x="83" fg:w="19"/><text x="39.2171%" y="383.50">&lt;core::hash::..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (19 samples, 8.92%)</title><rect x="38.9671%" y="357" width="8.9202%" height="15" fill="rgb(248,177,22)" fg:x="83" fg:w="19"/><text x="39.2171%" y="367.50">&lt;core::hash::..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9 samples, 4.23%)</title><rect x="43.6620%" y="341" width="4.2254%" height="15" fill="rgb(215,211,37)" fg:x="93" fg:w="9"/><text x="43.9120%" y="351.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 3.29%)</title><rect x="44.6009%" y="325" width="3.2864%" height="15" fill="rgb(241,128,51)" fg:x="95" fg:w="7"/><text x="44.8509%" y="335.50">cor..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.94%)</title><rect x="47.8873%" y="389" width="0.9390%" height="15" fill="rgb(227,165,31)" fg:x="102" fg:w="2"/><text x="48.1373%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 2.35%)</title><rect x="52.5822%" y="261" width="2.3474%" height="15" fill="rgb(228,167,24)" fg:x="112" fg:w="5"/><text x="52.8322%" y="271.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.47%)</title><rect x="54.4601%" y="245" width="0.4695%" height="15" fill="rgb(228,143,12)" fg:x="116" fg:w="1"/><text x="54.7101%" y="255.50"></text></g><g><title>core::cmp::min (1 samples, 0.47%)</title><rect x="54.9296%" y="261" width="0.4695%" height="15" fill="rgb(249,149,8)" fg:x="117" fg:w="1"/><text x="55.1796%" y="271.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.47%)</title><rect x="54.9296%" y="245" width="0.4695%" height="15" fill="rgb(243,35,44)" fg:x="117" fg:w="1"/><text x="55.1796%" y="255.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.47%)</title><rect x="54.9296%" y="229" width="0.4695%" height="15" fill="rgb(246,89,9)" fg:x="117" fg:w="1"/><text x="55.1796%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (27 samples, 12.68%)</title><rect x="49.2958%" y="309" width="12.6761%" height="15" fill="rgb(233,213,13)" fg:x="105" fg:w="27"/><text x="49.5458%" y="319.50">&lt;std::collections::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (27 samples, 12.68%)</title><rect x="49.2958%" y="293" width="12.6761%" height="15" fill="rgb(233,141,41)" fg:x="105" fg:w="27"/><text x="49.5458%" y="303.50">&lt;core::hash::sip::S..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (27 samples, 12.68%)</title><rect x="49.2958%" y="277" width="12.6761%" height="15" fill="rgb(239,167,4)" fg:x="105" fg:w="27"/><text x="49.5458%" y="287.50">&lt;core::hash::sip::H..</text></g><g><title>core::hash::sip::u8to64_le (14 samples, 6.57%)</title><rect x="55.3991%" y="261" width="6.5728%" height="15" fill="rgb(209,217,16)" fg:x="118" fg:w="14"/><text x="55.6491%" y="271.50">core::has..</text></g><g><title>hashbrown::map::make_insert_hash (56 samples, 26.29%)</title><rect x="37.5587%" y="421" width="26.2911%" height="15" fill="rgb(219,88,35)" fg:x="80" fg:w="56"/><text x="37.8087%" y="431.50">hashbrown::map::make_insert_hash</text></g><g><title>core::hash::BuildHasher::hash_one (55 samples, 25.82%)</title><rect x="38.0282%" y="405" width="25.8216%" height="15" fill="rgb(220,193,23)" fg:x="81" fg:w="55"/><text x="38.2782%" y="415.50">core::hash::BuildHasher::hash_one</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (32 samples, 15.02%)</title><rect x="48.8263%" y="389" width="15.0235%" height="15" fill="rgb(230,90,52)" fg:x="104" fg:w="32"/><text x="49.0763%" y="399.50">core::hash::impls::&lt;imp..</text></g><g><title>&lt;day_20_2017::Point3 as core::hash::Hash&gt;::hash (32 samples, 15.02%)</title><rect x="48.8263%" y="373" width="15.0235%" height="15" fill="rgb(252,106,19)" fg:x="104" fg:w="32"/><text x="49.0763%" y="383.50">&lt;day_20_2017::Point3 as..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (32 samples, 15.02%)</title><rect x="48.8263%" y="357" width="15.0235%" height="15" fill="rgb(206,74,20)" fg:x="104" fg:w="32"/><text x="49.0763%" y="367.50">core::hash::impls::&lt;imp..</text></g><g><title>core::hash::Hasher::write_i32 (31 samples, 14.55%)</title><rect x="49.2958%" y="341" width="14.5540%" height="15" fill="rgb(230,138,44)" fg:x="105" fg:w="31"/><text x="49.5458%" y="351.50">core::hash::Hasher::wr..</text></g><g><title>core::hash::Hasher::write_u32 (31 samples, 14.55%)</title><rect x="49.2958%" y="325" width="14.5540%" height="15" fill="rgb(235,182,43)" fg:x="105" fg:w="31"/><text x="49.5458%" y="335.50">core::hash::Hasher::wr..</text></g><g><title>core::num::&lt;impl u32&gt;::to_ne_bytes (4 samples, 1.88%)</title><rect x="61.9718%" y="309" width="1.8779%" height="15" fill="rgb(242,16,51)" fg:x="132" fg:w="4"/><text x="62.2218%" y="319.50">c..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (57 samples, 26.76%)</title><rect x="37.5587%" y="453" width="26.7606%" height="15" fill="rgb(248,9,4)" fg:x="80" fg:w="57"/><text x="37.8087%" y="463.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (57 samples, 26.76%)</title><rect x="37.5587%" y="437" width="26.7606%" height="15" fill="rgb(210,31,22)" fg:x="80" fg:w="57"/><text x="37.8087%" y="447.50">hashbrown::rustc_entry::&lt;impl hashbrown::ma..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.47%)</title><rect x="63.8498%" y="421" width="0.4695%" height="15" fill="rgb(239,54,39)" fg:x="136" fg:w="1"/><text x="64.0998%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.47%)</title><rect x="63.8498%" y="405" width="0.4695%" height="15" fill="rgb(230,99,41)" fg:x="136" fg:w="1"/><text x="64.0998%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 2.82%)</title><rect x="67.1362%" y="261" width="2.8169%" height="15" fill="rgb(253,106,12)" fg:x="143" fg:w="6"/><text x="67.3862%" y="271.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 2.35%)</title><rect x="67.6056%" y="245" width="2.3474%" height="15" fill="rgb(213,46,41)" fg:x="144" fg:w="5"/><text x="67.8556%" y="255.50">c..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 2.82%)</title><rect x="71.3615%" y="245" width="2.8169%" height="15" fill="rgb(215,133,35)" fg:x="152" fg:w="6"/><text x="71.6115%" y="255.50">co..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (20 samples, 9.39%)</title><rect x="65.2582%" y="309" width="9.3897%" height="15" fill="rgb(213,28,5)" fg:x="139" fg:w="20"/><text x="65.5082%" y="319.50">&lt;std::collect..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (20 samples, 9.39%)</title><rect x="65.2582%" y="293" width="9.3897%" height="15" fill="rgb(215,77,49)" fg:x="139" fg:w="20"/><text x="65.5082%" y="303.50">&lt;core::hash::..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (20 samples, 9.39%)</title><rect x="65.2582%" y="277" width="9.3897%" height="15" fill="rgb(248,100,22)" fg:x="139" fg:w="20"/><text x="65.5082%" y="287.50">&lt;core::hash::..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (10 samples, 4.69%)</title><rect x="69.9531%" y="261" width="4.6948%" height="15" fill="rgb(208,67,9)" fg:x="149" fg:w="10"/><text x="70.2031%" y="271.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.47%)</title><rect x="74.1784%" y="245" width="0.4695%" height="15" fill="rgb(219,133,21)" fg:x="158" fg:w="1"/><text x="74.4284%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.47%)</title><rect x="74.6479%" y="309" width="0.4695%" height="15" fill="rgb(246,46,29)" fg:x="159" fg:w="1"/><text x="74.8979%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 4.23%)</title><rect x="77.4648%" y="181" width="4.2254%" height="15" fill="rgb(246,185,52)" fg:x="165" fg:w="9"/><text x="77.7148%" y="191.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.47%)</title><rect x="81.2207%" y="165" width="0.4695%" height="15" fill="rgb(252,136,11)" fg:x="173" fg:w="1"/><text x="81.4707%" y="175.50"></text></g><g><title>core::cmp::min (1 samples, 0.47%)</title><rect x="81.6901%" y="181" width="0.4695%" height="15" fill="rgb(219,138,53)" fg:x="174" fg:w="1"/><text x="81.9401%" y="191.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.47%)</title><rect x="81.6901%" y="165" width="0.4695%" height="15" fill="rgb(211,51,23)" fg:x="174" fg:w="1"/><text x="81.9401%" y="175.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.47%)</title><rect x="81.6901%" y="149" width="0.4695%" height="15" fill="rgb(247,221,28)" fg:x="174" fg:w="1"/><text x="81.9401%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (36 samples, 16.90%)</title><rect x="75.1174%" y="229" width="16.9014%" height="15" fill="rgb(251,222,45)" fg:x="160" fg:w="36"/><text x="75.3674%" y="239.50">&lt;std::collections::hash::m..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (36 samples, 16.90%)</title><rect x="75.1174%" y="213" width="16.9014%" height="15" fill="rgb(217,162,53)" fg:x="160" fg:w="36"/><text x="75.3674%" y="223.50">&lt;core::hash::sip::SipHashe..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (36 samples, 16.90%)</title><rect x="75.1174%" y="197" width="16.9014%" height="15" fill="rgb(229,93,14)" fg:x="160" fg:w="36"/><text x="75.3674%" y="207.50">&lt;core::hash::sip::Hasher&lt;S..</text></g><g><title>core::hash::sip::u8to64_le (21 samples, 9.86%)</title><rect x="82.1596%" y="181" width="9.8592%" height="15" fill="rgb(209,67,49)" fg:x="175" fg:w="21"/><text x="82.4096%" y="191.50">core::hash::si..</text></g><g><title>hashbrown::map::make_hash (61 samples, 28.64%)</title><rect x="64.7887%" y="341" width="28.6385%" height="15" fill="rgb(213,87,29)" fg:x="138" fg:w="61"/><text x="65.0387%" y="351.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (61 samples, 28.64%)</title><rect x="64.7887%" y="325" width="28.6385%" height="15" fill="rgb(205,151,52)" fg:x="138" fg:w="61"/><text x="65.0387%" y="335.50">core::hash::BuildHasher::hash_one</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (39 samples, 18.31%)</title><rect x="75.1174%" y="309" width="18.3099%" height="15" fill="rgb(253,215,39)" fg:x="160" fg:w="39"/><text x="75.3674%" y="319.50">core::hash::impls::&lt;impl core..</text></g><g><title>&lt;day_20_2017::Point3 as core::hash::Hash&gt;::hash (39 samples, 18.31%)</title><rect x="75.1174%" y="293" width="18.3099%" height="15" fill="rgb(221,220,41)" fg:x="160" fg:w="39"/><text x="75.3674%" y="303.50">&lt;day_20_2017::Point3 as core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (39 samples, 18.31%)</title><rect x="75.1174%" y="277" width="18.3099%" height="15" fill="rgb(218,133,21)" fg:x="160" fg:w="39"/><text x="75.3674%" y="287.50">core::hash::impls::&lt;impl core..</text></g><g><title>core::hash::Hasher::write_i32 (39 samples, 18.31%)</title><rect x="75.1174%" y="261" width="18.3099%" height="15" fill="rgb(221,193,43)" fg:x="160" fg:w="39"/><text x="75.3674%" y="271.50">core::hash::Hasher::write_i32</text></g><g><title>core::hash::Hasher::write_u32 (39 samples, 18.31%)</title><rect x="75.1174%" y="245" width="18.3099%" height="15" fill="rgb(240,128,52)" fg:x="160" fg:w="39"/><text x="75.3674%" y="255.50">core::hash::Hasher::write_u32</text></g><g><title>core::num::&lt;impl u32&gt;::to_ne_bytes (3 samples, 1.41%)</title><rect x="92.0188%" y="229" width="1.4085%" height="15" fill="rgb(253,114,12)" fg:x="196" fg:w="3"/><text x="92.2688%" y="239.50"></text></g><g><title>&lt;day_20_2017::Temp as aoc_util::AocSolver&gt;::part_2::{{closure}} (63 samples, 29.58%)</title><rect x="64.7887%" y="421" width="29.5775%" height="15" fill="rgb(215,223,47)" fg:x="138" fg:w="63"/><text x="65.0387%" y="431.50">&lt;day_20_2017::Temp as aoc_util::AocSolver&gt;::part..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (63 samples, 29.58%)</title><rect x="64.7887%" y="405" width="29.5775%" height="15" fill="rgb(248,225,23)" fg:x="138" fg:w="63"/><text x="65.0387%" y="415.50">&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as ..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (63 samples, 29.58%)</title><rect x="64.7887%" y="389" width="29.5775%" height="15" fill="rgb(250,108,0)" fg:x="138" fg:w="63"/><text x="65.0387%" y="399.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (63 samples, 29.58%)</title><rect x="64.7887%" y="373" width="29.5775%" height="15" fill="rgb(228,208,7)" fg:x="138" fg:w="63"/><text x="65.0387%" y="383.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (63 samples, 29.58%)</title><rect x="64.7887%" y="357" width="29.5775%" height="15" fill="rgb(244,45,10)" fg:x="138" fg:w="63"/><text x="65.0387%" y="367.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.94%)</title><rect x="93.4272%" y="341" width="0.9390%" height="15" fill="rgb(207,125,25)" fg:x="199" fg:w="2"/><text x="93.6772%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.94%)</title><rect x="93.4272%" y="325" width="0.9390%" height="15" fill="rgb(210,195,18)" fg:x="199" fg:w="2"/><text x="93.6772%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.94%)</title><rect x="93.4272%" y="309" width="0.9390%" height="15" fill="rgb(249,80,12)" fg:x="199" fg:w="2"/><text x="93.6772%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.47%)</title><rect x="93.8967%" y="293" width="0.4695%" height="15" fill="rgb(221,65,9)" fg:x="200" fg:w="1"/><text x="94.1467%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (1 samples, 0.47%)</title><rect x="94.8357%" y="389" width="0.4695%" height="15" fill="rgb(235,49,36)" fg:x="202" fg:w="1"/><text x="95.0857%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.47%)</title><rect x="94.8357%" y="373" width="0.4695%" height="15" fill="rgb(225,32,20)" fg:x="202" fg:w="1"/><text x="95.0857%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.47%)</title><rect x="94.8357%" y="357" width="0.4695%" height="15" fill="rgb(215,141,46)" fg:x="202" fg:w="1"/><text x="95.0857%" y="367.50"></text></g><g><title>__libc_start_main_impl (173 samples, 81.22%)</title><rect x="14.5540%" y="741" width="81.2207%" height="15" fill="rgb(250,160,47)" fg:x="31" fg:w="173"/><text x="14.8040%" y="751.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (173 samples, 81.22%)</title><rect x="14.5540%" y="725" width="81.2207%" height="15" fill="rgb(216,222,40)" fg:x="31" fg:w="173"/><text x="14.8040%" y="735.50">__libc_start_call_main</text></g><g><title>main (173 samples, 81.22%)</title><rect x="14.5540%" y="709" width="81.2207%" height="15" fill="rgb(234,217,39)" fg:x="31" fg:w="173"/><text x="14.8040%" y="719.50">main</text></g><g><title>std::rt::lang_start_internal (173 samples, 81.22%)</title><rect x="14.5540%" y="693" width="81.2207%" height="15" fill="rgb(207,178,40)" fg:x="31" fg:w="173"/><text x="14.8040%" y="703.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (173 samples, 81.22%)</title><rect x="14.5540%" y="677" width="81.2207%" height="15" fill="rgb(221,136,13)" fg:x="31" fg:w="173"/><text x="14.8040%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (173 samples, 81.22%)</title><rect x="14.5540%" y="661" width="81.2207%" height="15" fill="rgb(249,199,10)" fg:x="31" fg:w="173"/><text x="14.8040%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (173 samples, 81.22%)</title><rect x="14.5540%" y="645" width="81.2207%" height="15" fill="rgb(249,222,13)" fg:x="31" fg:w="173"/><text x="14.8040%" y="655.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (173 samples, 81.22%)</title><rect x="14.5540%" y="629" width="81.2207%" height="15" fill="rgb(244,185,38)" fg:x="31" fg:w="173"/><text x="14.8040%" y="639.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (173 samples, 81.22%)</title><rect x="14.5540%" y="613" width="81.2207%" height="15" fill="rgb(236,202,9)" fg:x="31" fg:w="173"/><text x="14.8040%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (173 samples, 81.22%)</title><rect x="14.5540%" y="597" width="81.2207%" height="15" fill="rgb(250,229,37)" fg:x="31" fg:w="173"/><text x="14.8040%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (173 samples, 81.22%)</title><rect x="14.5540%" y="581" width="81.2207%" height="15" fill="rgb(206,174,23)" fg:x="31" fg:w="173"/><text x="14.8040%" y="591.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (173 samples, 81.22%)</title><rect x="14.5540%" y="565" width="81.2207%" height="15" fill="rgb(211,33,43)" fg:x="31" fg:w="173"/><text x="14.8040%" y="575.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (173 samples, 81.22%)</title><rect x="14.5540%" y="549" width="81.2207%" height="15" fill="rgb(245,58,50)" fg:x="31" fg:w="173"/><text x="14.8040%" y="559.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (173 samples, 81.22%)</title><rect x="14.5540%" y="533" width="81.2207%" height="15" fill="rgb(244,68,36)" fg:x="31" fg:w="173"/><text x="14.8040%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (173 samples, 81.22%)</title><rect x="14.5540%" y="517" width="81.2207%" height="15" fill="rgb(232,229,15)" fg:x="31" fg:w="173"/><text x="14.8040%" y="527.50">core::ops::function::FnOnce::call_once</text></g><g><title>day_20_2017::main (173 samples, 81.22%)</title><rect x="14.5540%" y="501" width="81.2207%" height="15" fill="rgb(254,30,23)" fg:x="31" fg:w="173"/><text x="14.8040%" y="511.50">day_20_2017::main</text></g><g><title>aoc_util::AocSolver::execute (173 samples, 81.22%)</title><rect x="14.5540%" y="485" width="81.2207%" height="15" fill="rgb(235,160,14)" fg:x="31" fg:w="173"/><text x="14.8040%" y="495.50">aoc_util::AocSolver::execute</text></g><g><title>&lt;day_20_2017::Temp as aoc_util::AocSolver&gt;::part_2 (160 samples, 75.12%)</title><rect x="20.6573%" y="469" width="75.1174%" height="15" fill="rgb(212,155,44)" fg:x="44" fg:w="160"/><text x="20.9073%" y="479.50">&lt;day_20_2017::Temp as aoc_util::AocSolver&gt;::part_2</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::retain (67 samples, 31.46%)</title><rect x="64.3192%" y="453" width="31.4554%" height="15" fill="rgb(226,2,50)" fg:x="137" fg:w="67"/><text x="64.5692%" y="463.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::retain</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::retain (67 samples, 31.46%)</title><rect x="64.3192%" y="437" width="31.4554%" height="15" fill="rgb(234,177,6)" fg:x="137" fg:w="67"/><text x="64.5692%" y="447.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::retain</text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 1.41%)</title><rect x="94.3662%" y="421" width="1.4085%" height="15" fill="rgb(217,24,9)" fg:x="201" fg:w="3"/><text x="94.6162%" y="431.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2 samples, 0.94%)</title><rect x="94.8357%" y="405" width="0.9390%" height="15" fill="rgb(220,13,46)" fg:x="202" fg:w="2"/><text x="95.0857%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.47%)</title><rect x="95.3052%" y="389" width="0.4695%" height="15" fill="rgb(239,221,27)" fg:x="203" fg:w="1"/><text x="95.5552%" y="399.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.47%)</title><rect x="95.7746%" y="677" width="0.4695%" height="15" fill="rgb(222,198,25)" fg:x="204" fg:w="1"/><text x="96.0246%" y="687.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.47%)</title><rect x="95.7746%" y="661" width="0.4695%" height="15" fill="rgb(211,99,13)" fg:x="204" fg:w="1"/><text x="96.0246%" y="671.50"></text></g><g><title>openaux (1 samples, 0.47%)</title><rect x="95.7746%" y="645" width="0.4695%" height="15" fill="rgb(232,111,31)" fg:x="204" fg:w="1"/><text x="96.0246%" y="655.50"></text></g><g><title>_dl_map_object (1 samples, 0.47%)</title><rect x="95.7746%" y="629" width="0.4695%" height="15" fill="rgb(245,82,37)" fg:x="204" fg:w="1"/><text x="96.0246%" y="639.50"></text></g><g><title>open_verify (1 samples, 0.47%)</title><rect x="95.7746%" y="613" width="0.4695%" height="15" fill="rgb(227,149,46)" fg:x="204" fg:w="1"/><text x="96.0246%" y="623.50"></text></g><g><title>__GI___pread64_nocancel (1 samples, 0.47%)</title><rect x="95.7746%" y="597" width="0.4695%" height="15" fill="rgb(218,36,50)" fg:x="204" fg:w="1"/><text x="96.0246%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.47%)</title><rect x="95.7746%" y="581" width="0.4695%" height="15" fill="rgb(226,80,48)" fg:x="204" fg:w="1"/><text x="96.0246%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.47%)</title><rect x="95.7746%" y="565" width="0.4695%" height="15" fill="rgb(238,224,15)" fg:x="204" fg:w="1"/><text x="96.0246%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.47%)</title><rect x="95.7746%" y="549" width="0.4695%" height="15" fill="rgb(241,136,10)" fg:x="204" fg:w="1"/><text x="96.0246%" y="559.50"></text></g><g><title>day-20-2017 (206 samples, 96.71%)</title><rect x="0.0000%" y="773" width="96.7136%" height="15" fill="rgb(208,32,45)" fg:x="0" fg:w="206"/><text x="0.2500%" y="783.50">day-20-2017</text></g><g><title>_start (175 samples, 82.16%)</title><rect x="14.5540%" y="757" width="82.1596%" height="15" fill="rgb(207,135,9)" fg:x="31" fg:w="175"/><text x="14.8040%" y="767.50">_start</text></g><g><title>_dl_start (2 samples, 0.94%)</title><rect x="95.7746%" y="741" width="0.9390%" height="15" fill="rgb(206,86,44)" fg:x="204" fg:w="2"/><text x="96.0246%" y="751.50"></text></g><g><title>_dl_start_final (2 samples, 0.94%)</title><rect x="95.7746%" y="725" width="0.9390%" height="15" fill="rgb(245,177,15)" fg:x="204" fg:w="2"/><text x="96.0246%" y="735.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.94%)</title><rect x="95.7746%" y="709" width="0.9390%" height="15" fill="rgb(206,64,50)" fg:x="204" fg:w="2"/><text x="96.0246%" y="719.50"></text></g><g><title>dl_main (2 samples, 0.94%)</title><rect x="95.7746%" y="693" width="0.9390%" height="15" fill="rgb(234,36,40)" fg:x="204" fg:w="2"/><text x="96.0246%" y="703.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.47%)</title><rect x="96.2441%" y="677" width="0.4695%" height="15" fill="rgb(213,64,8)" fg:x="205" fg:w="1"/><text x="96.4941%" y="687.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.47%)</title><rect x="96.2441%" y="661" width="0.4695%" height="15" fill="rgb(210,75,36)" fg:x="205" fg:w="1"/><text x="96.4941%" y="671.50"></text></g><g><title>elf_machine_rela (1 samples, 0.47%)</title><rect x="96.2441%" y="645" width="0.4695%" height="15" fill="rgb(229,88,21)" fg:x="205" fg:w="1"/><text x="96.4941%" y="655.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.47%)</title><rect x="96.2441%" y="629" width="0.4695%" height="15" fill="rgb(252,204,47)" fg:x="205" fg:w="1"/><text x="96.4941%" y="639.50"></text></g><g><title>do_lookup_x (1 samples, 0.47%)</title><rect x="96.2441%" y="613" width="0.4695%" height="15" fill="rgb(208,77,27)" fg:x="205" fg:w="1"/><text x="96.4941%" y="623.50"></text></g><g><title>check_match (1 samples, 0.47%)</title><rect x="96.2441%" y="597" width="0.4695%" height="15" fill="rgb(221,76,26)" fg:x="205" fg:w="1"/><text x="96.4941%" y="607.50"></text></g><g><title>strcmp (1 samples, 0.47%)</title><rect x="96.2441%" y="581" width="0.4695%" height="15" fill="rgb(225,139,18)" fg:x="205" fg:w="1"/><text x="96.4941%" y="591.50"></text></g><g><title>all (213 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(230,137,11)" fg:x="0" fg:w="213"/><text x="0.2500%" y="799.50"></text></g><g><title>perf-exec (7 samples, 3.29%)</title><rect x="96.7136%" y="773" width="3.2864%" height="15" fill="rgb(212,28,1)" fg:x="206" fg:w="7"/><text x="96.9636%" y="783.50">per..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.29%)</title><rect x="96.7136%" y="757" width="3.2864%" height="15" fill="rgb(248,164,17)" fg:x="206" fg:w="7"/><text x="96.9636%" y="767.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.29%)</title><rect x="96.7136%" y="741" width="3.2864%" height="15" fill="rgb(222,171,42)" fg:x="206" fg:w="7"/><text x="96.9636%" y="751.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.29%)</title><rect x="96.7136%" y="725" width="3.2864%" height="15" fill="rgb(243,84,45)" fg:x="206" fg:w="7"/><text x="96.9636%" y="735.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.29%)</title><rect x="96.7136%" y="709" width="3.2864%" height="15" fill="rgb(252,49,23)" fg:x="206" fg:w="7"/><text x="96.9636%" y="719.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.29%)</title><rect x="96.7136%" y="693" width="3.2864%" height="15" fill="rgb(215,19,7)" fg:x="206" fg:w="7"/><text x="96.9636%" y="703.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.29%)</title><rect x="96.7136%" y="677" width="3.2864%" height="15" fill="rgb(238,81,41)" fg:x="206" fg:w="7"/><text x="96.9636%" y="687.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.29%)</title><rect x="96.7136%" y="661" width="3.2864%" height="15" fill="rgb(210,199,37)" fg:x="206" fg:w="7"/><text x="96.9636%" y="671.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.29%)</title><rect x="96.7136%" y="645" width="3.2864%" height="15" fill="rgb(244,192,49)" fg:x="206" fg:w="7"/><text x="96.9636%" y="655.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.29%)</title><rect x="96.7136%" y="629" width="3.2864%" height="15" fill="rgb(226,211,11)" fg:x="206" fg:w="7"/><text x="96.9636%" y="639.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.29%)</title><rect x="96.7136%" y="613" width="3.2864%" height="15" fill="rgb(236,162,54)" fg:x="206" fg:w="7"/><text x="96.9636%" y="623.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.29%)</title><rect x="96.7136%" y="597" width="3.2864%" height="15" fill="rgb(220,229,9)" fg:x="206" fg:w="7"/><text x="96.9636%" y="607.50">[[k..</text></g></svg></svg>